Ian Ryan (iryan01) and Caden Chang (cchang15)

Help Received: Sam (TA), Bill (TA), Theo (TA), George (TA)

Based on the assembly code, the part of our program that takes the longest
time is the while loop. We know this because the lines of assembly code that
show up the most in the qcachegrind are all lines that are related to 
retrieving the next word of the program and are guaranteed to be called each
iteration of the loop. This step is unavoidable because
the program needs to know what the next command is. There is no obvious way
to change the assembly code because the most used assembly code instructions
are comparison instructions such as test and cmp. These correspond to asserts
and checks in our while loop that ensure we don't seg fault, and checking when
to finish the while loop. 

For example, one of our most used assembly instruction was a test instruction
that corresponded to a check to assert on line 97. This assert ensured that
a segment we were retrieving from memory was not NULL. If this check is not
there, we run a risk of encountering a seg fault in our code. Therefore, there
is no direct way to improve this.

Another of our most commonly used assembly instructions were cmp and jae 
instructions that corresponded to the condition in our while loop. This while
loop runs until the program counter is equal to the length of program.
Therefore the comparison (program counter <  program_length) happens with each
iteration of the while loop and is necessary for the program flow.

Hours spent analyzing: 10
Hours spent solving: 20

valgrind --tool=callgrind --dump-instr=yes ./um midmark.um